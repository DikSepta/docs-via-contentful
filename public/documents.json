{
  "en-US": {
    "GCUIpSPED0rgaFsQ27ess": {
      "id": "GCUIpSPED0rgaFsQ27ess",
      "title": "test",
      "slug": "tessss",
      "menu_order": 1,
      "content": "TEST"
    },
    "5FbdnhmnuGggPtfSivls4Z": {
      "id": "5FbdnhmnuGggPtfSivls4Z",
      "title": "Configuration",
      "slug": "configuration",
      "parentDocId": "6M3PI5hzY00dCKmTlBOYtN",
      "menu_order": 1,
      "content": "After completing installation, the next critical step is to configure your environment. Proper configuration ensures your static site behaves correctly in both development and production environments, and that it connects seamlessly with external services like Contentful, analytics, and deployment targets. .env.local — Environment Variables Create a .env.local file at the root of the project to store sensitive and environment-specific settings. Below is an example: CONTENTFUL_SPACE_ID=your_space_id\nCONTENTFUL_ACCESS_TOKEN=your_delivery_token\nNEXT_PUBLIC_BASE_URL=https://yourdomain.com\nNEXT_PUBLIC_ANALYTICS_ID=UA-XXXXXXXXX Notes: Use NEXT_PUBLIC_ prefix for variables that need to be exposed to the browser. Avoid committing .env.local to version control — it should be added to .gitignore. Internationalization (i18n) This platform supports manual internationalization via route-based locales (e.g. /en, /fr, /ja). To enable and configure: Add your supported locales in i18n/i18n-types.ts: export const locales = ['en', 'fr', 'ja'] as const\nexport const baseLocale = 'en' Ensure that each locale is supported in your routes using generateStaticParams() under [lang] and [[...slug]]. Translate static content using your preferred i18n library such as typesafe-i18n or file-based custom loaders. Contentful Configuration Make sure your Contentful content model for Documentation includes the following fields: title: Short Text slug: Short Text (e.g. \"getting-started\", \"configuration\") content: Rich Text parentDoc: Reference (optional, for hierarchy and nesting) Localization can be enabled within Contentful if you want multilingual support. Be sure to assign locale-specific values for each field if localization is turned on. Static Translation Setup If you are using typesafe-i18n, ensure the following steps are completed: Define translations in i18n/en/index.ts, i18n/fr/index.ts, and so on. Use getI18n(locale) in server components such as layout.tsx. Access translations in client components using the useI18n() hook. This approach ensures fully static translation resolution and avoids unnecessary runtime fetching or hydration mismatches. Caching and Revalidation With output: 'export', your entire site is statically generated at build time. No runtime revalidation occurs Pages are regenerated only when the site is rebuilt Content updates in Contentful require a redeploy (usually triggered by webhook + GitHub Actions) Testing Your Configuration To simulate a production environment locally: npm run build\nnpm run export\nnpx serve out Then visit your local site and test the following paths: /en/getting-started /en/installation /en/configuration Make sure they load fully-rendered HTML without dynamic fetches. Summary You’ve now configured: Secure environment variable management Manual internationalization via static routing Contentful schema and localization setup Static export rules and caching expectations Once everything looks good, you’re ready to proceed to the next steps: Internationalization or Deployment."
    },
    "6M3PI5hzY00dCKmTlBOYtN": {
      "id": "6M3PI5hzY00dCKmTlBOYtN",
      "title": "Getting Started",
      "slug": "getting-started",
      "menu_order": 1,
      "content": "Welcome to our official documentation! This guide is designed to help you get started with our platform — whether you're a beginner or an experienced developer aiming to understand the architecture and development workflows. What is This Platform? Our platform is a modular, flexible system built to help developers and product teams: Accelerate frontend and documentation development Integrate content from Contentful (headless CMS) Export fully static, SEO-friendly sites using Next.js 15 App Router It follows the JAMstack philosophy — combining JavaScript, APIs, and Markup — to deliver fast-loading, scalable, and easily deployable web applications. We use manual internationalization (i18n) via URL-based locale routing (/en/, /fr/, etc.) and generate content statically for optimized performance. Prerequisites Ensure you have the following installed: Node.js (v18+) npm or yarn Git Visual Studio Code (recommended) You'll also need: A Contentful account API keys for Contentful delivery (read-only) Basic knowledge of React and the Next.js App Router is helpful but not mandatory. Project Setup 1. Clone the Repository git clone https://github.com/your-org/your-project.git\ncd your-project 2. Install Dependencies npm install\n# or\nyarn install 3. Configure Environment Create a .env.local file in the root folder: CONTENTFUL_SPACE_ID=your_space_id\nCONTENTFUL_ACCESS_TOKEN=your_access_token\nNEXT_PUBLIC_BASE_URL=http://localhost:3000 🔒 Never commit .env.local to your Git repository. 4. Start the Dev Server npm run dev Open your browser and visit: http://localhost:3000/en/getting-started Folder Structure app/\n├── [lang]/\n│   ├── layout.tsx\n│   └── docs/\n│       └── [[...slug]]/\ncomponents/\nlib/\ni18n/\npublic/ app/: Contains all App Router routes components/: Shared UI components lib/: Utility functions (e.g., Contentful client) i18n/: Locale configurations and translation logic public/: Static assets (e.g., images, favicon) Static Site Generation When you run the build: npm run build\nnpm run export Next.js will: Fetch content from Contentful at build time Generate static HTML and assets in /out Output a site ready for deployment (e.g. to S3 + CloudFront) Deployment (Overview) We use GitHub Actions to automate the build + deploy process. Content update in Contentful → Webhook triggers GitHub GitHub Action builds the site and runs next export Output files are uploaded to S3 CloudFront cache is invalidated The entire process is optimized for speed and SEO. Next Steps Once you're done with setup, check out: Installation Configuration Internationalization For issues, check the Troubleshooting Guide or contact the dev team. "
    },
    "53Ojn3kFATgQfwbDHacSwx": {
      "id": "53Ojn3kFATgQfwbDHacSwx",
      "title": "Installation",
      "slug": "installation",
      "parentDocId": "6M3PI5hzY00dCKmTlBOYtN",
      "menu_order": 2,
      "content": "Installing the platform is quick and straightforward. This guide walks you through setting up the system on your local machine and outlines the required tools and configuration to get started. System Requirements Make sure your development environment meets the following prerequisites: Node.js: v18 or newer npm: v9+ (or Yarn v1.22+) Git: Version control system Contentful Account: With space ID and access token Operating System: macOS, Linux, or Windows (WSL compatible) IDE: We recommend Visual Studio Code with Prettier and ESLint extensions Clone the Repository Start by cloning the project from GitHub: git clone https://github.com/your-org/your-project.git\ncd your-project Ensure you're on the main branch: git checkout main Install Dependencies Install the necessary dependencies: npm install\n# or\nyarn install This will install React, Next.js, Contentful SDK, and all supporting libraries. Set Environment Variables Create a .env.local file in the project root with the following keys: CONTENTFUL_SPACE_ID=your_space_id\nCONTENTFUL_ACCESS_TOKEN=your_delivery_api_token\nNEXT_PUBLIC_BASE_URL=http://localhost:3000 💡 Replace placeholders with your actual Contentful credentials. Run the Development Server After configuration, start the local dev server: npm run dev You should now be able to visit the app at: http://localhost:3000/en/getting-started/installation Project Structure Overview app/\n├── [lang]/\n│   └── docs/\n│       └── [[...slug]]/\ncomponents/\nlib/\ni18n/\npublic/ app/: Handles routing and static generation via App Router components/: Contains shared UI components lib/: Contains helpers (e.g., Contentful client, i18n logic) i18n/: Locale definitions and translation logic public/: Static assets like logos and icons Static Build (Optional) To build the site statically for deployment: npm run build\nnpm run export The output will be available in the /out directory. What's Next? Now that your app is installed and running, you're ready to move on to: Configuration Using Contentful Deploying to S3 + CloudFront If you encounter issues, refer to the Troubleshooting Guide or contact the development team via Slack. "
    }
  },
  "ja": {
    "GCUIpSPED0rgaFsQ27ess": {
      "id": "GCUIpSPED0rgaFsQ27ess",
      "title": "test",
      "slug": "tessss",
      "menu_order": 1,
      "content": "TEST"
    },
    "5FbdnhmnuGggPtfSivls4Z": {
      "id": "5FbdnhmnuGggPtfSivls4Z",
      "title": "構成",
      "slug": "configuration",
      "parentDocId": "6M3PI5hzY00dCKmTlBOYtN",
      "menu_order": 1,
      "content": "インストールが完了したら、次の重要なステップは環境設定です。適切な設定を行うことで、静的サイトが開発環境と本番環境の両方で正しく動作し、Contentful、アナリティクス、デプロイメントターゲットなどの外部サービスとシームレスに接続できるようになります。 .env.local — 環境変数\n機密性の高い環境固有の設定を保存するために、プロジェクトのルートに .env.local ファイルを作成します。以下に例を示します。\nCONTENTFUL_SPACE_ID=your_space_id\nCONTENTFUL_ACCESS_TOKEN=your_delivery_token\nNEXT_PUBLIC_BASE_URL=https://yourdomain.com\nNEXT_PUBLIC_ANALYTICS_ID=UA-XXXXXXXXX\n注:\nブラウザに公開する必要がある変数には、NEXT_PUBLIC_ プレフィックスを使用してください。\n.env.local をバージョン管理にコミットしないでください。.gitignore に追加する必要があります。 国際化 (i18n)\nこのプラットフォームは、ルートベースのロケール (例: /en、/fr、/ja) による手動の国際化をサポートしています。有効化と設定方法:\ni18n/i18n-types.ts にサポート対象のロケールを追加します: export const locales = ['en', 'fr', 'ja'] as const\nexport const baseLocale = 'en'\n[lang] および [[...slug]] の generateStaticParams() を使用して、ルートで各ロケールがサポートされていることを確認してください。\ntypesafe-i18n などの推奨の i18n ライブラリやファイルベースのカスタムローダーを使用して、静的コンテンツを翻訳してください。 Contentful の設定\nドキュメント用の Contentful コンテンツモデルに以下のフィールドが含まれていることを確認してください。\ntitle: ショートテキスト\nslug: ショートテキスト（例: \"getting-started\"、\"configuration\"）\ncontent: リッチテキスト\nparentDoc: 参照（階層構造とネスト構造のため、オプション） 多言語サポートが必要な場合は、Contentful 内でローカリゼーションを有効にできます。ローカリゼーションを有効にする場合は、各フィールドにロケール固有の値を割り当ててください。 静的翻訳の設定\ntypesafe-i18n を使用している場合は、以下の手順が完了していることを確認してください。\ni18n/en/index.ts、i18n/fr/index.ts などで翻訳を定義します。\nlayout.tsx などのサーバーコンポーネントで getI18n(locale) を使用します。\nクライアントコンポーネントで useI18n() フックを使用して翻訳にアクセスします。 このアプローチにより、完全に静的な翻訳解決が保証され、実行時の不要なフェッチやハイドレーションの不一致を回避できます。 キャッシュと再検証\noutput: 'export' を指定すると、サイト全体がビルド時に静的に生成されます。\n実行時の再検証は行われません。\nページはサイトが再構築された場合にのみ再生成されます。\nContentful でコンテンツを更新するには、再デプロイが必要です（通常は Webhook と GitHub Actions によってトリガーされます）。 設定のテスト\nローカルで本番環境をシミュレートするには、以下のコマンドを実行します。\nnpm run build\nnpm run export\nnpx serve out\n次に、ローカルサイトにアクセスし、以下のパスをテストします。\n/en/getting-started\n/en/installation\n/en/configuration 動的フェッチなしで、完全にレンダリングされた HTML が読み込まれることを確認します。 まとめ\nこれで以下の設定が完了しました。\n安全な環境変数管理\n静的ルーティングによる手動による国際化\nContentful スキーマとローカリゼーションの設定\n静的エクスポートルールとキャッシュの期待値 すべて問題がなければ、次のステップである国際化またはデプロイに進むことができます。"
    },
    "6M3PI5hzY00dCKmTlBOYtN": {
      "id": "6M3PI5hzY00dCKmTlBOYtN",
      "title": "はじめる",
      "slug": "getting-started",
      "menu_order": 1,
      "content": "公式ドキュメントへようこそ！このガイドは、初心者の方から、システムアーキテクチャやワークフローを理解したい経験豊富な開発者の方まで、プラットフォームをゼロから使い始めるのに役立つように設計されています。 このプラットフォームとは？ このプラットフォームは、開発者や製品チームが開発ワークフローを加速し、スケーラブルなインフラストラクチャを維持し、Contentful、GitHub、AWSなどのサードパーティツールと統合できるように構築された、モジュール式の柔軟なソリューションです。マイクロフロントエンドの哲学に基づいて設計されており、サーバーサイドレンダリングとNext.js 15 App Routerを使用した静的エクスポートの両方をサポートしています。\nJavaScriptフレームワーク、API、マークアップを組み合わせたJAMstackアプローチにより、インタラクティブ性や開発者のコ​​ントロールを犠牲にすることなく、高速でSEOフレンドリーな静的ウェブサイトを提供します。 前提条件 始める前に、以下のものがインストールされていることを確認してください。 Node.js (v18 以降) npm または yarn Git IDE (VSCode など) さらに、以下の基本的な知識があることを推奨します。 React Next.js App Router Contentful (ヘッドレス CMS) Markdown またはリッチテキストの概念 "
    },
    "53Ojn3kFATgQfwbDHacSwx": {
      "id": "53Ojn3kFATgQfwbDHacSwx",
      "title": "インストール",
      "slug": "installation",
      "parentDocId": "6M3PI5hzY00dCKmTlBOYtN",
      "menu_order": 2,
      "content": "アプリのインストール方法 \n"
    }
  }
}